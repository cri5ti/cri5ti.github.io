<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Cristi Mihai]]></title>
    <subtitle><![CDATA[A dev&#39;s rants]]></subtitle>
    <link href="/atom.xml" rel="self"/>
    <link href="http://cri5ti.com"/>
    <updated>2015-11-01T11:04:49+00:00</updated>
    <id>http://cri5ti.com</id>

    <author>
        <name><![CDATA[Cristi Mihai]]></name>
    </author>

    <generator uri="http://cri5ti.com/blog/web/2015/09/25/My-static-generator/">Forge</generator>

    

        

    <entry>
        <title><![CDATA[A new dev stack - Docker + webpack]]></title>
        <link href="http://cri5ti.com/dev/2015/10/26/my-dev-stack/"/>
        <id>http://cri5ti.com/dev/2015/10/26/my-dev-stack/</id>
        <published>2015-10-26T12:00:00+00:00</published>
        <updated>2015-10-26T12:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>How would you like to be able to run one command and have your entire development stack up and running? </p>
<pre><code class="lang-bash">./infra <span class="hljs-keyword">up</span>
</code></pre>
<p>And this starts my database service, runs the server, compiles the client modules, and then watches any files 
for changes and restarts the server if needed, reloads the page or just hot updates the styles.</p>
<p>And the best part is, you can just checkout the code and do this on any system.</p>
<p>I&#39;m doing this with:</p>
<h2 id="-docker-https-www-docker-com-"><a href="https://www.docker.com/">Docker</a></h2>
<p>Runs an app in it&#39;s own space; think of it like running a VM, but in native speed.</p>
<p>Lots of examples, projects and videos. I recommend watching some videos on Youtube, just make sure to be recent, as it 
had a very rapid growth in the last year or so.</p>
<p><em>Dockerfile</em>:</p>
<pre><code class="lang-Dockerfile"><span class="hljs-built_in">FROM</span>    ubuntu:<span class="hljs-number">14.04</span>       

<span class="hljs-built_in">RUN</span>     <span class="bash">sudo apt-get install --yes curl
</span><span class="hljs-built_in">RUN</span>     <span class="bash">curl --silent --location https://deb.nodesource.com/setup_4.x | sudo bash -
</span><span class="hljs-built_in">RUN</span>     <span class="bash">sudo apt-get install --yes nodejs
</span>
<span class="hljs-built_in">COPY</span>    <span class="bash">. /nodeapp
</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/nodeapp
</span>
<span class="hljs-built_in">RUN</span>     <span class="bash">npm install
</span>
<span class="hljs-built_in">CMD</span>     <span class="bash">[<span class="hljs-string">"npm"</span>, <span class="hljs-string">"start"</span>]</span>
</code></pre>
<p>Starting from a base image, install nodejs, copy the source files in the image, install dependencies and run it.
On development, I use a variation on this where I mount the source code directly in the container without copying it (via
<a href="https://docs.docker.com/userguide/dockervolumes/">volumes</a>), so you can change the code and reload.</p>
<h2 id="-webpack-https-webpack-github-io-"><a href="https://webpack.github.io/">Webpack</a></h2>
<p>Webpack is a module bundler, it takes your many js files and bundles them together, like require.js, but it was much easier,
faster, and comes with many other goodies, such as hot module replacement (save your code and it updates in your browser immediately).</p>
<p>I&#39;ve previously used a require.js with grunt workflow on a rather massive project, and the compile time was getting very slow,
brittle configuration of the module dependencies.</p>
<p>I&#39;m still quite new on webpack, but I&#39;m loving it so far.
With it&#39;s loaders, such as babel-loader, adopting ES6 is a breeze.</p>
<h2 id="-docker-compose-https-docs-docker-com-compose-"><a href="https://docs.docker.com/compose/">Docker-compose</a></h2>
<p>Manage a collection of Docker containers and link them together.</p>
<p>Here&#39;s an example of tying together several containers:</p>
<pre><code class="lang-yaml"><span class="hljs-attribute">redis</span>:
    <span class="hljs-attribute">build</span>: db/redis/

<span class="hljs-attribute">mongo</span>:
    <span class="hljs-attribute">build</span>: db/mongo/

<span class="hljs-attribute">website</span>:
    <span class="hljs-attribute">build</span>: app/website/
    <span class="hljs-attribute">links</span>:
     - redis
     - mongo
</code></pre>
<p>Here, 3 containers are linked together, and running <code>docker-compose up</code> builds all the images and starts the containers. </p>
<p>For development, I extend this with some more goodies:</p>
<pre><code class="lang-yaml"><span class="hljs-symbol">mongo:</span>
    <span class="hljs-comment"># expose the port to the host machine so I can easily connect to it with dev tools.</span>
    <span class="hljs-symbol">ports:</span>
     - <span class="hljs-string">"27017:27017"</span>                                

<span class="hljs-symbol">website:</span>
    <span class="hljs-comment"># mount some folders from the host for development:</span>
    <span class="hljs-comment"># - source code</span>
    <span class="hljs-comment"># - my own node_modules (I use npm link with my own modules)</span>
    <span class="hljs-symbol">volumes:</span>                                        
     - ./app/<span class="hljs-symbol">website:</span>/nodeapp                       
     - ../modules/<span class="hljs-symbol">:/usr/local/lib/node_modules/</span>     

    <span class="hljs-comment"># expose the app and webpack-dev-server to host</span>
    <span class="hljs-symbol">ports:</span>
     - <span class="hljs-string">"8080:8080"</span>                                  
     - <span class="hljs-string">"8090:8090"</span>                                  

    <span class="hljs-comment"># nodemon for server restart on code changes &amp; webpack-dev-server to serve client modules</span>
    <span class="hljs-symbol">command:</span> &gt;                                      
            nodemon -w server/ server/index.js
            &amp; npm run dev

    <span class="hljs-comment"># trim logging</span>
    <span class="hljs-symbol">log_driver:</span> <span class="hljs-string">"json-file"</span>                         
    <span class="hljs-symbol">log_opt:</span>
        max-<span class="hljs-symbol">size:</span> <span class="hljs-string">"100k"</span>
        max-<span class="hljs-symbol">file:</span> <span class="hljs-string">"1"</span>
</code></pre>
<p>Then you can make a quick bash script:</p>
<pre><code class="lang-bash">FILES=<span class="hljs-string">"-f infra.base.yaml -f infra.dev.yaml"</span>

<span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$ENV</span>"</span> = <span class="hljs-string">"PROD"</span> ]; <span class="hljs-keyword">then</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-operator">-e</span> <span class="hljs-string">"Environment: \e[1;32mPRODUCTION\e[m"</span>
    FILES=<span class="hljs-string">"-f infra.base.yaml"</span>
<span class="hljs-keyword">else</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-operator">-e</span> <span class="hljs-string">"Environment: \e[1;31mDEV\e[m"</span>
    FILES=<span class="hljs-string">"-f infra.base.yaml -f infra.dev.yaml"</span>
<span class="hljs-keyword">fi</span>

docker-compose <span class="hljs-variable">$FILES</span> <span class="hljs-variable">$@</span>
</code></pre>
<p>and use it: </p>
<pre><code>./infra <span class="hljs-keyword">up</span>
</code></pre><p>and then deploy it:</p>
<pre><code><span class="hljs-keyword">export</span> <span class="hljs-literal">ENV</span>=PROD
./infra up
</code></pre>]]></content>
        <summary type="html">
            <![CDATA[How would you like to be able to run one command and have your entire development stack up and running? 
./infra up

And this starts my database service, runs the server, compiles the client modules, and then watches any files 
for changes and restarts the server if needed, reloads the page...]]>
        </summary>

        
        <category term="Docker" scheme="http://cri5ti.com/tags/Docker/"/>
        
        <category term="node.js" scheme="http://cri5ti.com/tags/node.js/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Node plays modded - Hacking the Minecraft protocol]]></title>
        <link href="http://cri5ti.com/dev/2015/10/18/Minecraft-protocol/"/>
        <id>http://cri5ti.com/dev/2015/10/18/Minecraft-protocol/</id>
        <published>2015-10-18T11:00:00+00:00</published>
        <updated>2015-10-18T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>I&#39;ve written an implementation of the Minecraft protocol in Nodejs.</p>
<p>It resembles the <a href="https://github.com/PrismarineJS/node-minecraft-protocol">node-minecraft-protocol</a> project, but it 
supports defining plugin channel protocols as well, so it supports modded clients / servers.  </p>
<p>I intend to use it as a proxy, to be able to switch servers in real time and maybe gather some more profiling for the dashboard.</p>
<h1 id="test-run-">Test run:</h1>
<p>Let&#39;s create a 1.7.10 client with Forge support.</p>
<pre><code><span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> mc.Client({
    version: <span class="hljs-string">'1.7.10'</span>,
    ext: [<span class="hljs-string">'forge-1.7.10'</span>]
});
</code></pre><p>Prepare the endpoints:</p>
<pre><code><span class="hljs-variable"><span class="hljs-keyword">var</span> ep</span> = client.endpoint;
<span class="hljs-variable"><span class="hljs-keyword">var</span> fmlHS</span> = ep.channel('FML|HS');
</code></pre><p>Log in:</p>
<pre><code><span class="hljs-tag">ep</span><span class="hljs-class">.on</span>(<span class="hljs-string">'connect'</span>, () =&gt; {
    <span class="hljs-tag">ep</span><span class="hljs-class">.send</span>(<span class="hljs-string">'handshake'</span>, {
        <span class="hljs-attribute">protocolVersion</span>: <span class="hljs-number">5</span>,
        <span class="hljs-attribute">serverAddress</span>: <span class="hljs-string">'localhost'</span>,
        <span class="hljs-attribute">serverPort</span>: <span class="hljs-number">25565</span>,
        <span class="hljs-attribute">nextState</span>: <span class="hljs-number">2</span>
    });

    <span class="hljs-tag">ep</span><span class="hljs-class">.send</span>(<span class="hljs-string">'loginStart'</span>, { <span class="hljs-attribute">name</span>: playerName });
});
</code></pre><p>Maintain the keep alive:</p>
<pre><code>ep.<span class="hljs-literal">on</span>(<span class="hljs-string">'keepAlive'</span>, <span class="hljs-function"><span class="hljs-params">(data)</span> =&gt;</span> {
    ep.send(<span class="hljs-string">'keepAlive'</span>, { <span class="hljs-attribute">id</span>: data.id });
});
</code></pre><p>And move when we join the game:  </p>
<pre><code>ep.<span class="hljs-literal">on</span>(<span class="hljs-string">'joinGame'</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    var myPos;

    ep.<span class="hljs-literal">on</span>(<span class="hljs-string">'playerPosLook'</span>, <span class="hljs-function"><span class="hljs-params">(d)</span> =&gt;</span> {
        myPos = d;
    });

    setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
        myPos.stance = Math.round(myPos.y - <span class="hljs-number">1.62</span>);
        ep.send(<span class="hljs-string">'playerPosition'</span>, myPos);
        myPos.z -= <span class="hljs-number">0.01</span>;
    }, <span class="hljs-number">50</span>);

});
</code></pre><p>Here&#39;s a test run with about 20 bots running left to right.</p>
{% img src='ingame.png', class='enlarge' %}
<p>Sadly, I need to do some more optimizations, as at around 50 clients, the cpu load jumps at around 15~20%, which is unnacceptable 
for a proxy. Or I might disable packet inspection and just pass data through until some interesting event is triggered.</p>
]]></content>
        <summary type="html">
            <![CDATA[I&#39;ve written an implementation of the Minecraft protocol in Nodejs.
It resembles the node-minecraft-protocol project, but it 
supports defining plugin channel protocols as well, so it supports modded clients / servers.  
I intend to use it as a proxy, to be able to switch servers in real time and maybe...]]>
        </summary>

        
        <category term="minecraft" scheme="http://cri5ti.com/tags/minecraft/"/>
        
        <category term="node.js" scheme="http://cri5ti.com/tags/node.js/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Mapping with d3]]></title>
        <link href="http://cri5ti.com/dev/2015/10/15/d3-maps/"/>
        <id>http://cri5ti.com/dev/2015/10/15/d3-maps/</id>
        <published>2015-10-15T11:00:00+00:00</published>
        <updated>2015-10-15T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>I&#39;ve previously started playing with <a href="http://d3js.org">D3.js</a>, and I really enjoyed it&#39;s power and it&#39;s core idea of how
 it maintains the state and updates (which reminds me of <a href="https://facebook.github.io/react/">React</a>)</p>
<p>I&#39;ve rendered a Minecraft world to tiles using <a href="http://mapcrafter.org/">Mapcrafter</a>
 and then feed them to the <a href="https://github.com/d3/d3-plugins/tree/master/geo/tile">d3.geo.tile</a> plugin.</p>
{% img src='map.png', class='enlarge' %}
]]></content>
        <summary type="html">
            <![CDATA[I&#39;ve previously started playing with D3.js, and I really enjoyed it&#39;s power and it&#39;s core idea of how
 it maintains the state and updates (which reminds me of React)
I&#39;ve rendered a Minecraft world to tiles using Mapcrafter
 and then feed them to the d3.geo.tile plugin.

...]]>
        </summary>

        
        <category term="d3.js" scheme="http://cri5ti.com/tags/d3.js/"/>
        
        <category term="node.js" scheme="http://cri5ti.com/tags/node.js/"/>
        
        <category term="minecraft" scheme="http://cri5ti.com/tags/minecraft/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Monitoring dashboard]]></title>
        <link href="http://cri5ti.com/dev/2015/10/11/Dashboard/"/>
        <id>http://cri5ti.com/dev/2015/10/11/Dashboard/</id>
        <published>2015-10-11T11:00:00+00:00</published>
        <updated>2015-10-11T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>Here I&#39;m trying to build a quick monitoring app to collect, aggregate, store, and display data:  </p>
<p>So far I&#39;ve fleshed out the UI with some random fake data.</p>
<p>I&#39;ve already been able to collect Java profiling data over JMX from node.js, so the rest shouldn&#39;t be much of a problem. </p>
<p>For charts, I&#39;ve tried out several charting libraries, but ended up using the more general <a href="http://d3js.org">D3.js</a> library, 
and it&#39;s been an amazing learning opportunity.</p>
{% img src='dashboard.png', class='enlarge' %}
]]></content>
        <summary type="html">
            <![CDATA[Here I&#39;m trying to build a quick monitoring app to collect, aggregate, store, and display data:  
So far I&#39;ve fleshed out the UI with some random fake data.
I&#39;ve already been able to collect Java profiling data over JMX from node.js, so the rest shouldn&#39;t be much of a problem....]]>
        </summary>

        
        <category term="node.js" scheme="http://cri5ti.com/tags/node.js/"/>
        
        <category term="d3.js" scheme="http://cri5ti.com/tags/d3.js/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[No spam please!: Clean up spam in Google Analytics]]></title>
        <link href="http://cri5ti.com/dev/2015/10/06/Cleanup-Analytics/"/>
        <id>http://cri5ti.com/dev/2015/10/06/Cleanup-Analytics/</id>
        <published>2015-10-06T11:00:00+00:00</published>
        <updated>2015-10-06T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>For the past year or so, Google Analytics has been showing complete garbage for my site, and if you&#39;re here, 
it&#39;s probably been happening to you too.</p>
<p><aside>On a website with no real traffic the spam is obvious.</aside>
{% img src='spam.png' %}</p>
<p>What&#39;s probably going on is that some wise guys decided it would be a nice way to spam the Google Analytics API by sending fake data to random property ids.</p>
<p>So how do you filter out this data then?</p>
<h1 id="the-hard-way">The hard way</h1>
<p>The only solution I have found so far involved actively filtering out the spam on a case by case. That meant creating lots of rules or filtering expressions for each case. 
I absolutely hated this solution because it involves a lot of trial and error and it&#39;s a permanent (losing) battle.</p>
<h1 id="my-solution">My solution</h1>
<p>Instead of being one step behind your spam, I thought it might be easier if we can flag the real data somehow and filter out everything else.</p>
<p>One way of doing that is using <em>Custom Dimensions</em>.</p>
<p>Go to your property&#39;s <strong>Admin &gt; Custom Definitions &gt; Custom Dimensions</strong> and create a new dimension: </p>
{% img src@2x='ga-add-dimension.png' %}
<p>And here&#39;s the custom dimension in the Google Analytics script:</p>
<pre><code class="lang-javascript"><span class="hljs-list">(<span class="hljs-keyword">function</span><span class="hljs-list">(<span class="hljs-keyword">i</span>,s,o,g,r,a,m)</span>{i<span class="hljs-list">[<span class="hljs-variable">'GoogleAnalyticsObject</span>']=r<span class="hljs-comment">;i[r]=i[r]||function(){</span>
   <span class="hljs-list">(<span class="hljs-keyword">i</span><span class="hljs-list">[<span class="hljs-keyword">r</span>].q=i<span class="hljs-list">[<span class="hljs-keyword">r</span>].q||<span class="hljs-list">[]).push<span class="hljs-list">(<span class="hljs-keyword">arguments</span>)</span>},i<span class="hljs-list">[<span class="hljs-keyword">r</span>].l=1*new Date<span class="hljs-list">()</span><span class="hljs-comment">;a=s.createElement(o),</span>
   m=s.getElementsByTagName<span class="hljs-list">(<span class="hljs-keyword">o</span>)</span><span class="hljs-list">[<span class="hljs-keyword">0</span>]<span class="hljs-comment">;a.async=1;a.src=g;m.parentNode.insertBefore(a,m)</span>
})<span class="hljs-list">(<span class="hljs-keyword">window</span>,document,<span class="hljs-variable">'script</span>',<span class="hljs-variable">'//www.google-analytics.com/analytics.js</span>',<span class="hljs-variable">'ga</span>')</span><span class="hljs-comment">;</span>
ga<span class="hljs-list">(<span class="hljs-variable">'create</span>', <span class="hljs-variable">'UA-XXXXXXXX</span>', <span class="hljs-variable">'auto</span>')</span><span class="hljs-comment">;</span>
// flag real data:
ga<span class="hljs-list">(<span class="hljs-variable">'set</span>', <span class="hljs-variable">'dimension1</span>', <span class="hljs-variable">'yesplease</span>')</span><span class="hljs-comment">; // dimension1: bacon="yesplease"</span>
ga<span class="hljs-list">(<span class="hljs-variable">'send</span>', <span class="hljs-variable">'pageview</span>')</span><span class="hljs-comment">;</span></span></span></span></span></span></span></span></span>
</code></pre>
<p>Next step is to filter out everything else but <code>bacon=&quot;yesplease&quot;</code>.</p>
<p>For this, I create a new <em>View</em> on my property and create a new <em>Filter</em>:</p>
{% img src@2x='ga-filter.png' %}
<p>And done. </p>
<hr>
<p>Before:</p>
{% img src='report_before.png', class='enlarge' %}
<hr>
<p>After:</p>
{% img src='report_after.png', class='enlarge' %}
<hr>
<h1 id="update-">Update:</h1>
<p>Reddit user Groggie posted <a href="https://www.reddit.com/r/analytics/comments/3npc39/cleanup_spam_in_google_analytics_without_long/cvqcjo1">a very insightful comment</a> in reply to my article on <a href="https://www.reddit.com/r/analytics">/r/analytics</a>: </p>
<blockquote>
<p>What you&#39;re doing is exactly a hostname filter. Instead of editing the code to inject an ID (like &#39;bacon&#39;) into the site itself, I&#39;d recommend just using a regex match for your hostname and create a new view/filter with that.</p>
<p>This method will only stop &quot;ghost&quot; spambots - so the spambots that actually visit your site (semalt), will need to be blocked another way.</p>
</blockquote>
<p>Oh, how I wished I would have known about the hostname property before.</p>
<p>Indeed, whenever analytics tracks your page, it also sends out the domain on which it was viewed.
So it seems a better way to do the ghost spam filtering would be to just add a filter on your hostname:</p>
{% img src='ga-filter-hostname.png', class='enlarge' %}
<p>I&#39;ve noticed that using this method, visits from Google Cache, or via Google Translate will be filtered out as
they&#39;re going to have a different hostname, but that&#39;s not a big deal for me.</p>
]]></content>
        <summary type="html">
            <![CDATA[For the past year or so, Google Analytics has been showing complete garbage for my site, and if you&#39;re here, 
it&#39;s probably been happening to you too.
On a website with no real traffic the spam is obvious.

What&#39;s probably going on is that some wise guys decided it would be a...]]>
        </summary>

        
        <category term="Google Analytics" scheme="http://cri5ti.com/tags/Google-Analytics/"/>
        
        <category term="no spam" scheme="http://cri5ti.com/tags/no-spam/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[LOD chunked rendering]]></title>
        <link href="http://cri5ti.com/game/2015/09/27/chunked-LOD/"/>
        <id>http://cri5ti.com/game/2015/09/27/chunked-LOD/</id>
        <published>2015-09-27T11:00:00+00:00</published>
        <updated>2015-09-27T11:00:00+00:00</updated>
        <content type="html"><![CDATA[{% section 'img-right' %}
{% img src='grid.svg' %}
<p>A naive approach in rendering the chunks in a view frustum would result in this example in about <em>230 chunks</em>.</p>
{% endsection %}
<hr>
{% section 'img-right' %}
{% img 'lod.svg' %}
<p>We can take advantage of the perspective, and render chunks at different level of details based on the distance to the camera.</p>
<p>In the above example, we can considerably reduce the number of chunks to <strong>17</strong>.</p>
<p>Because of the perspective, each chunk will have the same width on screen (one chunk wide in the example), so we should have a constant chunk density on screen space.</p>
{% endsection %}
<hr>
<p>An <a href="https://en.wikipedia.org/wiki/Octree">Octree</a> structure seems the perfect choice in building the chunk render list.</p>
{% section 'img-right' %}
{% img src='quad.svg' %}
<pre><code class="lang-cpp">template &lt;typename <span class="hljs-type">Data</span>&gt;
struct Octree {
    <span class="hljs-type">Data</span>* <span class="hljs-keyword">value</span>;
    vec3 center;
    <span class="hljs-built_in">float</span> <span class="hljs-built_in">size</span>;

    Octree&lt;<span class="hljs-type">Data</span>&gt; *parent;
    Octree&lt;<span class="hljs-type">Data</span>&gt; *children[<span class="hljs-number">8</span>];

    <span class="hljs-built_in">int</span> level; 
    <span class="hljs-built_in">int</span> <span class="hljs-built_in">index</span>; // child <span class="hljs-built_in">index</span> <span class="hljs-type">in</span> parent
    bool leaf;
};
</code></pre>
{% endsection %}
<h2 id="building-the-octree">Building the octree</h2>
<ol>
<li>start from the biggest cell that contains the complete view frustum</li>
<li>determine LOD based on distance to frustum</li>
<li>if current cell level == computed LOD, then add chunk to render list</li>
<li>if current cell level &lt; computed LOD, iterate children</li>
</ol>
<h3 id="1-determine-the-start-cell">1. Determine the start cell</h3>
<p>For the first time, we start from an arbitrary cell in the octree.</p>
<p>From here, we keep zooming out the octree (by navigating the parents) until our cell contains the whole view frustum.</p>
{% section 'img-right' %}
{% img 'zoom-out.gif' %}
<pre><code class="lang-cpp"><span class="hljs-keyword">while</span> (!chunkContainsCube(chunk, cameraPos, viewDistance)) {
    <span class="hljs-built_in">c</span> = <span class="hljs-built_in">c</span>-&gt;getOrMakeParent(<span class="hljs-type">CHILD_LEFT_DOWN_BACK</span>);
    <span class="hljs-built_in">c</span> = <span class="hljs-built_in">c</span>-&gt;getOrMakeParent(<span class="hljs-type">CHILD_RIGHT_UP_FRONT</span>);
}
</code></pre>
{% endsection %}
<hr>
<p>While zooming out, we create 2 levels in the Octree, to ensure that we enlarge on all dimensions:</p>
{% img 'expansion.svg' %}
<hr>
<p>Next, we check if we can zoom in, by checking if any of the children contains the frustum completely.</p>
{% section 'img-right' %}
{% img 'zoom-in.gif' %}
<pre><code class="lang-cpp">again:
<span class="hljs-keyword">for</span> (<span class="hljs-type">Chunk</span>* <span class="hljs-built_in">c</span> : chunk-&gt;children) {
    <span class="hljs-keyword">if</span> (cubeContainsChunk(cameraPos, viewDistance, <span class="hljs-built_in">c</span>)) {
        chunk = <span class="hljs-built_in">c</span>;
        goto again;
    }
}
</code></pre>
{% endsection %}
<hr>
<p>Now we have determined our start octree cell for building our render list.</p>
<hr>
<h2 id="results">Results</h2>
<p>Here are the chunks rendered in our engine:</p>
<div class="img-grid">
<figure>
    {% img 'screen1.png', label='Chunks crossing the y=0 plane' %}
    <figcaption>Only the chunks crossing the y=0 plane.</figcaption>
</figure>
<figure>
    {% img 'screen2.png', label='All chunks' %}
    <figcaption>All chunks</figcaption>
</figure>
</div>

<hr>
<video src="{% asset_url 'video.mp4' %}" width="642" controls/>

<hr>
]]></content>
        <summary type="html">
            <![CDATA[ A naive approach in rendering the chunks in a view frustum would result in this example in about 230 chunks.




We can take advantage of the perspective, and render chunks at different level of details based on the distance to the camera.
In the above example, we can considerably reduce the...]]>
        </summary>

        
        <category term="LOD" scheme="http://cri5ti.com/tags/LOD/"/>
        
        <category term="Octree" scheme="http://cri5ti.com/tags/Octree/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Powered by: Forge - A Node.js static content generator]]></title>
        <link href="http://cri5ti.com/dev/2015/09/25/My-static-generator/"/>
        <id>http://cri5ti.com/dev/2015/09/25/My-static-generator/</id>
        <published>2015-09-25T11:00:00+00:00</published>
        <updated>2015-09-25T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>After trying out static website generators, like <a href="https://jekyllrb.com/">Jekyll</a> and <a href="http://octopress.org/">Octopress</a>, I have 
started to appreciate the simplicity of deploying a bunch of files and be done with it. 
With the <a href="https://pages.github.com/">GitHub Pages</a>, the whole process becomes even more attractive, as even the 
hosting is free, and very simple, just one push away.</p>
<p>While any existing solution works well, I&#39;m a JavaScript guy, and I want to be able to customise everything to my liking. 
<a href="hexo">Hexo</a> was a good start, but we can do something better.</p>
<p>In the following post I will present <em>Forge</em>, my static generator that powers this website.</p>
<h2 id="tree-structure">Tree structure</h2>
<p>In Forge all data is organised in a tree structure, with each node having one of the basic types:</p>
<ul>
<li><strong>text</strong>: such as a static page, or a blog post.</li>
<li><strong>data</strong>: stores arbitrary data (we&#39;ll come to this later)</li>
<li><strong>namespace</strong>: groups related nodes together. Namespaces inherit from their parents.</li>
</ul>
<p>The default file processors are:</p>
<ul>
<li>folders create namespaces</li>
<li>markdown files create a data (the frontmatter) and text nodes</li>
<li>YAML files create data nodes</li>
<li>there are special <code>layout</code> nodes for templates</li>
<li><code>.js</code> files are executed to process the tree structure on the spot. </li>
</ul>
<hr/>

<figure>
    {% img  'step1.png' %}
    <aside>Files and folders are scanned to generate the tree.</aside>
</figure>

<hr/>

<figure>
    {% img  'step2.png' %}
    <aside>Markdown is split into data (frontmatter) and text.</aside>
</figure>

<hr/>

<p><em>Forge</em> doesn&#39;t have any implicit behaviour on how to generate anything, really. You have to write your own 
tree parsers that generates whatever you want.</p>
<p>Here is an example of how blog posts may be processed: </p>
<pre><code class="lang-js">blog.<span class="hljs-keyword">post</span>(function(blog) {
    <span class="hljs-keyword">var</span> regexPost = /^(\<span class="hljs-keyword">d</span>{4})-(\<span class="hljs-keyword">d</span>{2})-(\<span class="hljs-keyword">d</span>{2})-(.*)$/;
    blog.each({ <span class="hljs-keyword">type</span>: Node.NS, deep: true, name: regexPost }, function(<span class="hljs-keyword">post</span>, y, <span class="hljs-keyword">m</span>, <span class="hljs-keyword">d</span>, title) {
        <span class="hljs-keyword">post</span>.addData({ <span class="hljs-comment">// add extra data to posts</span>
            blog: blog,
            title: title,
            date: new <span class="hljs-literal">Date</span>(y, <span class="hljs-keyword">m</span>-1, <span class="hljs-keyword">d</span>)
        }); 

        posts.push(<span class="hljs-keyword">post</span>);
    });
});
</code></pre>
<figure>
    {% img  'step3.png' %}
    <aside>Here&#39;s the structure of a blog post after processing.</aside>
</figure>

<hr>
<h1 id="pages">Pages</h1>
<p>Pages that are supposed to be generated are explicitly specified while parsing the tree. 
This allows greater flexibility in what you produce, what data is available and what template to use. 
In our example blog, pages are generated for valid posts, tags, categories, archive, etc.</p>
<pre><code>blogNS.<span class="hljs-keyword">render</span>(<span class="hljs-string">'index.html'</span>, { <span class="hljs-keyword">layout</span>: <span class="hljs-string">'indexPosts'</span> }, {
    posts: posts <span class="hljs-comment">// custom data</span>
    <span class="hljs-comment">// rest of data is provided from the namespace</span>
});
</code></pre><h1 id="templates">Templates</h1>
<p>For templates, I use <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a>, an amazing template engine from Mozilla, which besides partials and includes,
also provides a nice inheritance feature via <a href="http://mozilla.github.io/nunjucks/templating.html#template-inheritance">blocks</a>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I really like this approach in generating the content, and I don&#39;t regret spending the time. 
It reminds me if my graduation project, a Content Management System based on a similar tree structure, so I had fun with it.</p>
<p>If I will have the time to iterate on the protect, I hope I can reduce the complexity of node processing, 
currently new data gets appended in new nodes, as I hoped I would be able to regenerate only affected nodes when filesystem changes, 
but that seemed to be more complex than I expected, and irrelevant at the moment as rebuilding everything is fast enough.</p>
<p>Another point I would like to work is the way tree scanning work. Currently the namespace iteration is not contrained, 
you have to implement the iterators to deep search for the nodes of specific types and break when you found what you need. </p>
<p>I don&#39;t expect I will release the project any time soon, as it&#39;s more of a personal toy, complex and messy in places.  </p>
<p>Have you found this interesting? Let me know, and I might post some more details about it. </p>
]]></content>
        <summary type="html">
            <![CDATA[After trying out static website generators, like Jekyll and Octopress, I have 
started to appreciate the simplicity of deploying a bunch of files and be done with it. 
With the GitHub Pages, the whole process becomes even more attractive, as even the 
hosting is free, and very simple, just one...]]>
        </summary>

        
        <category term="Forge" scheme="http://cri5ti.com/tags/Forge/"/>
        
        <category term="static generator" scheme="http://cri5ti.com/tags/static-generator/"/>
        
        <category term="node.js" scheme="http://cri5ti.com/tags/node.js/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Sandbox: Growing trees]]></title>
        <link href="http://cri5ti.com/game/2015/08/28/growing-trees/"/>
        <id>http://cri5ti.com/game/2015/08/28/growing-trees/</id>
        <published>2015-08-28T11:00:00+00:00</published>
        <updated>2015-08-28T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>We&#39;re going to need some trees for our <a href="/blog/game/2015/08/25/terrain-engine">terrain</a>, so I&#39;ve been experimenting with the <em>space colonization algorithm</em>.</p>
<aside>Whitepaper: <a href="http://algorithmicbotany.org/papers/colonization.egwnp2007.large.pdf">Modeling Trees with a Space Colonization Algorithm</a> - <em>Adam Runions, Brendan Lane, and Przemyslaw Prusinkiewicz</em>.</aside>


{% section 'img-grid' %}
{% img src='1.png', class='enlarge' %}
{% img src='2.png', class='enlarge' %}
{% endsection %}
<p>I&#39;ve done several changes on the algorithm, adding several parameters: </p>
<ul>
<li>control how the points attract branches (per branch level)</li>
<li>control the max length of branches</li>
<li>sprouting (simulate bud growing)</li>
</ul>
<p>Here is a snippet of the parameters:</p>
<pre><code class="lang-js"><span class="hljs-variable"><span class="hljs-keyword">var</span> attractRange</span> = <span class="hljs-number">50</span>;    <span class="hljs-comment">// the distance of attraction</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> attractWeight</span> = [<span class="hljs-number">0.02</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>]; <span class="hljs-comment">// the weight of attraction, per branching level. (Here, the trunk is barely affected)</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> collectRange</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// the range at which points are removed</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> gravityWeight</span> = <span class="hljs-number">0.01</span>; <span class="hljs-comment">// the weight gravity affects growth direction</span>

<span class="hljs-variable"><span class="hljs-keyword">var</span> growSpeed</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// the growth distance per iteration</span>

<span class="hljs-variable"><span class="hljs-keyword">var</span> maxLength</span> = <span class="hljs-number">500</span>; <span class="hljs-comment">// max length of tree</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> maxLengthVar</span> = <span class="hljs-number">0.2</span>;
<span class="hljs-variable"><span class="hljs-keyword">var</span> secondaryMaxLengthVariance</span> = [<span class="hljs-number">0.5</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.5</span>]; <span class="hljs-comment">// the variance of max length of branches, per level  (0 = no change, 0.5 = +/- 50% random variation)</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> secondaryMaxLengthWeight</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">0.8</span>]; <span class="hljs-comment">// fixed multiplier of max length per branch</span>

<span class="hljs-variable"><span class="hljs-keyword">var</span> sproutInterval</span> = [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>]; <span class="hljs-comment">// the interval at which buds are created</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> sproutIntervalVar</span> = <span class="hljs-number">0.2</span>; <span class="hljs-comment">// variation</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> sproutGerminationTime</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// time it takes for a bud to germinate. This prevents buds from collecting attraction points immediately, leaving the parent branch the chance to collect first.</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> sproutGerminationTimeVar</span> = <span class="hljs-number">5</span>; 

<span class="hljs-variable"><span class="hljs-keyword">var</span> branchingAngle</span> = [<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>]; <span class="hljs-comment">// the initial branch angles the buds sprout (per level)</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> branchingAngleVar</span> = [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>];

<span class="hljs-variable"><span class="hljs-keyword">var</span> secondaryGrowthRate</span> = <span class="hljs-number">0.1</span>; <span class="hljs-comment">// the branch girth growth rate</span>
</code></pre>
<p>And here it is running, parameterized for a fir tree:</p>
<iframe width="720" height="405" src="https://www.youtube.com/embed/jIgkLP9Jz1A" frameborder="0" allowfullscreen></iframe>]]></content>
        <summary type="html">
            <![CDATA[We&#39;re going to need some trees for our terrain, so I&#39;ve been experimenting with the space colonization algorithm.
Whitepaper: Modeling Trees with a Space Colonization Algorithm - Adam Runions, Brendan Lane, and Przemyslaw Prusinkiewicz.






I&#39;ve done several changes on the algorithm, adding several parameters: 

control how the points attract branches (per branch...]]>
        </summary>

        
        <category term="trees" scheme="http://cri5ti.com/tags/trees/"/>
        
        <category term="space colonization" scheme="http://cri5ti.com/tags/space-colonization/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Game engine: Terrain rendering]]></title>
        <link href="http://cri5ti.com/game/2015/08/25/terrain-engine/"/>
        <id>http://cri5ti.com/game/2015/08/25/terrain-engine/</id>
        <published>2015-08-25T11:00:00+00:00</published>
        <updated>2015-08-25T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>So, I&#39;ve been having fun with some OpenGL, I&#39;m working on a terrain engine, we&#39;ll see where it goes...</p>
{% img src='1.jpg', class="enlarge" %}
<hr>
<p>So far, I&#39;ve got:</p>
<ul>
<li><p>voxel terrain renderer, tesselated with <a href="https://en.wikipedia.org/wiki/Marching_cubes">marching cubes</a>. </p>
</li>
<li><p>the signed density function is generated from a few octaves of simplex noise.</p>
</li>
<li><p>multithreaded chunk generation and tesselation with no world bounds.</p>
</li>
<li><p>triplanar mapping with a fixed directional light.</p>
</li>
</ul>
<h2 id="performance-">Performance:</h2>
<p>Currently, the chunks are of fixed size, and I can generate and render about 7^3 chunks around the player, while you&#39;re moving around.</p>
<h2 id="immediate-future-plans-">Immediate future plans:</h2>
<ul>
<li><p>rewrite the <code>ChunkManager</code> to use the Octree to determine views in frustum, and apply LOD based on view distance. Currently I&#39;m using a <code>std::unordered_map</code> hashed by chunk coordinates, which is not very fast. (I&#39;m just for-looping around the player to get/generate visible chunks).</p>
</li>
<li><p>use LOD chunks to increase the view distance.</p>
</li>
<li><p>switch to <a href="http://www.cs.rice.edu/~jwarren/papers/techreport02408.pdf">Dual Contouring</a>.</p>
</li>
</ul>
]]></content>
        <summary type="html">
            <![CDATA[So, I&#39;ve been having fun with some OpenGL, I&#39;m working on a terrain engine, we&#39;ll see where it goes...


So far, I&#39;ve got:

voxel terrain renderer, tesselated with marching cubes. 

the signed density function is generated from a few octaves of simplex noise.

multithreaded chunk generation and tesselation with no world bounds.

triplanar mapping...]]>
        </summary>

        
        <category term="marching cubes" scheme="http://cri5ti.com/tags/marching-cubes/"/>
        
        <category term="triplanar mapping" scheme="http://cri5ti.com/tags/triplanar-mapping/"/>
        
        <category term="OpenGL" scheme="http://cri5ti.com/tags/OpenGL/"/>
        
        <category term="C++" scheme="http://cri5ti.com/tags/C++/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Dindin - A usable task manager.]]></title>
        <link href="http://cri5ti.com/projects/2013/08/15/dindin/"/>
        <id>http://cri5ti.com/projects/2013/08/15/dindin/</id>
        <published>2013-08-15T11:00:00+00:00</published>
        <updated>2013-08-15T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>I haven&#39;t found a good task manager yet that actually helps me get things done.
I loved the <a href="http://www.omnigroup.com/products/omnifocus/">OmniFocus</a> when I was still on OSX, but I&#39;ve moved to Windows and
I wasn&#39;t able to find a good replacement.</p>
<p>Like any geek, I&#39;ve decided to roll my own.</p>
{% img 'dindin.png' %}
]]></content>
        <summary type="html">
            <![CDATA[I haven&#39;t found a good task manager yet that actually helps me get things done.
I loved the OmniFocus when I was still on OSX, but I&#39;ve moved to Windows and
I wasn&#39;t able to find a good replacement.
Like any geek, I&#39;ve decided to roll my own.

...]]>
        </summary>

        
        <category term="Cancelled projects" scheme="http://cri5ti.com/tags/Cancelled-projects/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Shortfuse - A HTML5 Bomberman]]></title>
        <link href="http://cri5ti.com/projects/2012/03/19/HTML5-bomberman/"/>
        <id>http://cri5ti.com/projects/2012/03/19/HTML5-bomberman/</id>
        <published>2012-03-19T12:00:00+00:00</published>
        <updated>2012-03-19T12:00:00+00:00</updated>
        <content type="html"><![CDATA[<p>{# img &#39;screen-small.png&#39; #}</p>
<p>A HTML5 Bomberman clone using <em>node.js</em>, <em>socket.io</em>, <em>Backbone</em>, <em>underscore</em>, <em>jQuery</em>, CSS3 via <em>Sass</em> and <em>Compass</em></p>
<h2 id="-play-it-"><del>Play it</del></h2>
<p><em>Update:</em> The project is no longer hosted, but you can get the sources, and run it on your machine.</p>
<h4 id="-see-the-project-on-github-http-github-com-cri5ti-html5-bomberman-"><a href="http://github.com/cri5ti/html5-bomberman">See the project on github</a>.</h4>
<hr>
{% section 'img-grid' %}
{% img 'short-fuse-menu1.png' %}
{% img 'short-fuse-run.png' %}
{% img 'short-fuse-dead1.png' %}
{% endsection %}
<hr>
<p><a href="http://www.ducknextdoor.com/blog/index.php/2012/05/short-fuse-multiplayer-bomberman/">Ducknextdoor</a> wrote on <em>May 28, 2012</em> about the project:</p>
<blockquote>
<p>Short Fuse is multiplayer bomberman you play with your online buddies at playShortFuse.com. Players can also challenge their facebook friends and post automatically tracked win tallies to their walls.</p>
<p>Choose from 4 different bomberman characters (white, red, green and blue) and blast your way through the barriers in randomly generated maps, collecting power-ups as you duel to explosive victory or defeat.</p>
<p>Gloat your victories and other commentary via chat included in the game. This clever HTML5 arcade action game is free to play, just click the button below to open the game in a new window:</p>
</blockquote>
<p>{#</p>
<hr>
<!-- <iframe src="http://shortfuse.cri5ti.com/monitor/" scrolling="no" style="width: 100%; height: 150px; border: none;"></iframe> -->
<!-- [play]: http://shortfuse.cri5ti.com -->
<p>#}</p>
]]></content>
        <summary type="html">
            <![CDATA[An HTML5 Bomberman clone using node.js, socket.io, Backbone, Underscore, jQuery, CSS3 (via Compass + Sass)]]>
        </summary>

        
        <category term="node.js" scheme="http://cri5ti.com/tags/node.js/"/>
        
        <category term="socket.io" scheme="http://cri5ti.com/tags/socket.io/"/>
        
        <category term="backbone" scheme="http://cri5ti.com/tags/backbone/"/>
        
        <category term="underscore" scheme="http://cri5ti.com/tags/underscore/"/>
        
        <category term="jQuery" scheme="http://cri5ti.com/tags/jQuery/"/>
        
        <category term="CSS3" scheme="http://cri5ti.com/tags/CSS3/"/>
        
        <category term="SASS" scheme="http://cri5ti.com/tags/SASS/"/>
        
        <category term="Cancelled projects" scheme="http://cri5ti.com/tags/Cancelled-projects/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Adobe Illustrator: Collapse all layers in Illustrator]]></title>
        <link href="http://cri5ti.com/projects/2011/10/08/Collapse-all-layers-in-Illustrator/"/>
        <id>http://cri5ti.com/projects/2011/10/08/Collapse-all-layers-in-Illustrator/</id>
        <published>2011-10-08T11:00:00+00:00</published>
        <updated>2011-10-08T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<hr>
<h1 id="update-">Update:</h1>
<p><em>Starting with </em><a href="https://helpx.adobe.com/illustrator/using/whats-new-17-1.html">Adobe Illustrator CC 17.1</a><em>, layers remember open/closed state, making the tool described in this post unnecessary.</em></p>
<hr>
{% img 'preview.png' %}
<p>How much time have you wasted by collapsing the layers every time you open that <em>50-layer-Illustrator-file</em>?</p>
<p>Sadly, Illustrator CS5 <em>(Update: CS6 or CC either)</em> can&#39;t remember the states of the layers between saves, so every time you open a file, all the layers are expanded, so you have to waste a few good clicks to close them before you are ready for action.</p>
<p>If you don&#39;t care at all about this, just stop reading and get back to work!</p>
<p>I was really annoyed by this for a very long time, and I decided to do something about it.</p>
<p>I don&#39;t know if you&#39;ve heard about this, but if you hold the <code>ALT</code> key while you click to expand or collapse a layer, it will do this for all the sub-layers inside. That&#39;s great, so that means that all you have to do is put everything in one layer, and then just <code>ALT</code>+click that when you open your file, and you&#39;re done.</p>
<p>Sadly, there is a catch, this will not work if the sub-layers are hidden or locked. If you don&#39;t usually hide or lock layers, then you&#39;re already set: <strong>just use <code>ALT</code>+click and you&#39;re done</strong>.</p>
<hr>
<p>For the rest of us, I present you my extension, <code>AI Tools v1.0.0</code>, with only one tool - Collapse All.</p>
<p>After installing the extension using the <em>Extension Manager</em>, you will find the <em>Collapse All</em> panel in the Window &gt; Extensions menu.
The panel will help you make all the layers visible and unlock them, so you can ALT+click all the top layers to collapse everything.</p>
{% img 'img1b.png' %}
<p>Here are some layers in a file I just opened:</p>
{% img 'img1.png' %}
<p>First click on the <em>(1) Make all visible</em> button, then (2) <code>ALT</code>+click on the top layers to collapse:</p>
{% img 'img2.png' %}
<p>Last step, press <em>(3) Restore</em> button to get back to the initial visibility and lock state.</p>
{% img 'img3.png' %}
<p><em>Elapsed time: 5 seconds.</em></p>
<p>Please note that I actually expanded the top layers again in my previous picture, but without holding ALT this time, so I can show you that all the sub-layers are all nice and hmm... colapsed.</p>
<h3 id="and-here-is-the-extension-aitools-1-0-0-zxp-http-code-google-com-p-ai-tools-downloads-detail-name-aitools-1-0-0-zxp-">And here is the extension: <a href="http://code.google.com/p/ai-tools/downloads/detail?name=AiTools-1.0.0.zxp">AiTools-1.0.0.zxp</a></h3>
<p>Currently I have only tested it with Adobe Illustrator CS5 and CS6, but</p>
<p>When I&#39;ll get some more free time, I&#39;ll create a nice panel for my other script: <a href="/2011/10/Export-layers-in-Illustrator/">ai-layers-export</a>.</p>
<p>Thanks for reading, and let me know if you have any problems (on any topic related to Illustrator missing features).</p>
]]></content>
        <summary type="html">
            <![CDATA[ Update:
Starting with Adobe Illustrator CC 17.1, layers remember open/closed state, making the tool described in this post unnecessary.


How much time have you wasted by collapsing the layers every time you open that 50-layer-Illustrator-file?
Sadly, Illustrator CS5 (Update: CS6 or CC either) can&#39;t remember the states of the layers between saves,...]]>
        </summary>

        
        <category term="Adobe Illustrator" scheme="http://cri5ti.com/tags/Adobe-Illustrator/"/>
        
    </entry>

    

        

    <entry>
        <title><![CDATA[Ai Layers Export - An Adobe Illustrator script to export designs by layers.]]></title>
        <link href="http://cri5ti.com/projects/2011/10/07/Export-layers-in-Illustrator/"/>
        <id>http://cri5ti.com/projects/2011/10/07/Export-layers-in-Illustrator/</id>
        <published>2011-10-07T11:00:00+00:00</published>
        <updated>2011-10-07T11:00:00+00:00</updated>
        <content type="html"><![CDATA[<h1 id="what-is-it">What is it</h1>
<p>This script is based on Jon Hicks original <a href="http://www.hicksdesign.co.uk/journal/illustrator-exporting-layers-to-png">SaveLayersAsPNG</a> script which exports the top layers one by one.</p>
<p>When you&#39;re working on some big UI designs, you usually have lots of layers and sublayers, things that have to always stay visible, or some more complex scenarios. This script will export layers recursively based on some flags at the end of the layer name.</p>
<h1 id="layer-flags">Layer flags</h1>
<p>You can add a special flag at the end of a layer to control it&#39;s rendering:</p>
<ul>
<li><p><strong><code>(+)</code> - always visible</strong> - good for backgrounds, headers and footers, ...</p>
</li>
<li><p><strong><code>(-)</code> - ignore layer</strong></p>
</li>
<li><p><strong><code>(~)</code> - popup layer</strong> - useful for overlays and popups, the script will export once with the layer hidden, and once visible.</p>
</li>
<li><p><em>no flag</em> -</p>
</li>
</ul>
<h1 id="example">Example</h1>
{% img 'overlay.png' %}
{% img 'layers.png' %}
<h2 id="exported-files-">Exported files:</h2>
<pre><code><span class="hljs-function"><span class="hljs-title">acme-home-hovering-</span><span class="hljs-params">(~)</span></span><span class="hljs-class">.png</span>
<span class="hljs-function"><span class="hljs-title">acme-home-popup-</span><span class="hljs-params">(~)</span></span><span class="hljs-class">.png</span>
acme-home<span class="hljs-class">.png</span>
<span class="hljs-function"><span class="hljs-title">acme-product-big-</span><span class="hljs-params">(~)</span></span><span class="hljs-class">.png</span>
acme-product.png
</code></pre><div class="img-grid columns-3">
    {% img 'acme-home-hovering-~.png' %}
    {% img 'acme-home-popup-~.png' %}
    {% img 'acme-home.png' %}
    {% img 'acme-product-big-~.png' %}
    {% img 'acme-product.png' %}
</div>

<h2 id="get-it">Get it</h2>
<p>Download the extension from <a href="https://github.com/cri5ti/ai-layers-export">github</a>.</p>
]]></content>
        <summary type="html">
            <![CDATA[What is it
This script is based on Jon Hicks original SaveLayersAsPNG script which exports the top layers one by one.
When you&#39;re working on some big UI designs, you usually have lots of layers and sublayers, things that have to always stay visible, or some more complex scenarios. This script will...]]>
        </summary>

        
        <category term="Adobe Illustrator" scheme="http://cri5ti.com/tags/Adobe-Illustrator/"/>
        
        <category term="Ai Tools" scheme="http://cri5ti.com/tags/Ai-Tools/"/>
        
    </entry>

    

    
</feed>
